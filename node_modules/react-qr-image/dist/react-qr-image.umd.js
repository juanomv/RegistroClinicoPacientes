(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory(require('react'), require('qr-image-color')) :
  typeof define === 'function' && define.amd ? define(['react', 'qr-image-color'], factory) :
  (global.reactQrImage = factory(global.react,global.qr));
}(this, (function (React,qr) {
  React = React && React.hasOwnProperty('default') ? React['default'] : React;
  qr = qr && qr.hasOwnProperty('default') ? qr['default'] : qr;

  function objectWithoutProperties (obj, exclude) { var target = {}; for (var k in obj) if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k]; return target; }

  var getTextFromChildren = function (children) {
    var label = '';
    React.Children.map(children, function (child) {
      if (typeof child === 'string') {
        label += child;
      }
    });
    return label;
  };

  var QRImage = function (ref) {
    var text = ref.text;
    var ecLevel = ref.ecLevel;
    var size = ref.size;
    var margin = ref.margin;
    var transparent = ref.transparent;
    var color = ref.color;
    var background = ref.background;
    var children = ref.children;
    var rest = objectWithoutProperties( ref, ["text", "ecLevel", "size", "margin", "transparent", "color", "background", "children"] );
    var props = rest;

    var options = {
      type: 'png',
      ecLevel: ecLevel,
      size: size,
      margin: margin,
      transparent: transparent,
      color: color,
      background: background
    };
    var svgStr = qr.imageSync(text || getTextFromChildren(children), options);
    var uri = "data:image/png;base64, " + (svgStr.toString('base64'));
    return React.createElement( 'img', Object.assign({}, { alt: '' }, props, { src: uri }));
  };

  QRImage.defaultProps = {
    text: '',
    ecLevel: 'M',
    // Error correction level
    size: 5,
    // Size of one module in pixels
    margin: 4,
    // White space around QR image in modules
    transparent: false,
    background: undefined,
    // Color for code background
    color: '#333' //  Color for code blocks

  };
  var index = React.memo(QRImage);

  return index;

})));
