{"ast":null,"code":"import { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function scheduleIterable(input, scheduler) {\n  return new Observable(function (subscriber) {\n    var iterator;\n    executeSchedule(subscriber, scheduler, function () {\n      iterator = input[Symbol_iterator]();\n      executeSchedule(subscriber, scheduler, function () {\n        var _a;\n\n        var value;\n        var done;\n\n        try {\n          _a = iterator.next(), value = _a.value, done = _a.done;\n        } catch (err) {\n          subscriber.error(err);\n          return;\n        }\n\n        if (done) {\n          subscriber.complete();\n        } else {\n          subscriber.next(value);\n        }\n      }, 0, true);\n    });\n    return function () {\n      return isFunction(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return();\n    };\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/scheduled/scheduleIterable.ts"],"names":[],"mappings":"AAAA,SAAS,UAAT,QAA2B,eAA3B;AAEA,SAAS,QAAQ,IAAI,eAArB,QAA4C,oBAA5C;AACA,SAAS,UAAT,QAA2B,oBAA3B;AACA,SAAS,eAAT,QAAgC,yBAAhC;AAOA,OAAM,SAAU,gBAAV,CAA8B,KAA9B,EAAkD,SAAlD,EAA0E;AAC9E,SAAO,IAAI,UAAJ,CAAkB,UAAC,UAAD,EAAW;AAClC,QAAI,QAAJ;AAKA,IAAA,eAAe,CAAC,UAAD,EAAa,SAAb,EAAwB,YAAA;AAErC,MAAA,QAAQ,GAAI,KAAa,CAAC,eAAD,CAAb,EAAZ;AAEA,MAAA,eAAe,CACb,UADa,EAEb,SAFa,EAGb,YAAA;;;AACE,YAAI,KAAJ;AACA,YAAI,IAAJ;;AACA,YAAI;AAED,UAAA,EAAA,GAAkB,QAAQ,CAAC,IAAT,EAAlB,EAAE,KAAK,GAAA,EAAA,CAAA,KAAP,EAAS,IAAI,GAAA,EAAA,CAAA,IAAd;AACD,SAHD,CAGE,OAAO,GAAP,EAAY;AAEZ,UAAA,UAAU,CAAC,KAAX,CAAiB,GAAjB;AACA;AACD;;AAED,YAAI,IAAJ,EAAU;AAKR,UAAA,UAAU,CAAC,QAAX;AACD,SAND,MAMO;AAEL,UAAA,UAAU,CAAC,IAAX,CAAgB,KAAhB;AACD;AACF,OAzBY,EA0Bb,CA1Ba,EA2Bb,IA3Ba,CAAf;AA6BD,KAjCc,CAAf;AAuCA,WAAO,YAAA;AAAM,aAAA,UAAU,CAAC,QAAQ,KAAA,IAAR,IAAA,QAAQ,KAAA,KAAA,CAAR,GAAQ,KAAA,CAAR,GAAA,QAAQ,CAAE,MAAX,CAAV,IAAgC,QAAQ,CAAxC,MAAgC,EAAhC;AAAiD,KAA9D;AACD,GA9CM,CAAP;AA+CD","sourceRoot":"","sourcesContent":["import { Observable } from '../Observable';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { executeSchedule } from '../util/executeSchedule';\nexport function scheduleIterable(input, scheduler) {\n    return new Observable(function (subscriber) {\n        var iterator;\n        executeSchedule(subscriber, scheduler, function () {\n            iterator = input[Symbol_iterator]();\n            executeSchedule(subscriber, scheduler, function () {\n                var _a;\n                var value;\n                var done;\n                try {\n                    (_a = iterator.next(), value = _a.value, done = _a.done);\n                }\n                catch (err) {\n                    subscriber.error(err);\n                    return;\n                }\n                if (done) {\n                    subscriber.complete();\n                }\n                else {\n                    subscriber.next(value);\n                }\n            }, 0, true);\n        });\n        return function () { return isFunction(iterator === null || iterator === void 0 ? void 0 : iterator.return) && iterator.return(); };\n    });\n}\n//# sourceMappingURL=scheduleIterable.js.map"]},"metadata":{},"sourceType":"module"}