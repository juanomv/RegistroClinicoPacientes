{"ast":null,"code":"\"use strict\"; // Source: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\n\nvar cssTable = {\n  black: \"#000000\",\n  silver: \"#c0c0c0\",\n  gray: \"#808080\",\n  white: \"#ffffff\",\n  maroon: \"#800000\",\n  red: \"#ff0000\",\n  purple: \"#800080\",\n  fuchsia: \"#ff00ff\",\n  green: \"#008000\",\n  lime: \"#00ff00\",\n  olive: \"#808000\",\n  yellow: \"#ffff00\",\n  navy: \"#000080\",\n  blue: \"#0000ff\",\n  teal: \"#008080\",\n  aqua: \"#00ffff\",\n  orange: \"#ffa500\",\n  aliceblue: \"#f0f8ff\",\n  antiquewhite: \"#faebd7\",\n  aquamarine: \"#7fffd4\",\n  azure: \"#f0ffff\",\n  beige: \"#f5f5dc\",\n  bisque: \"#ffe4c4\",\n  blanchedalmond: \"#ffebcd\",\n  blueviolet: \"#8a2be2\",\n  brown: \"#a52a2a\",\n  burlywood: \"#deb887\",\n  cadetblue: \"#5f9ea0\",\n  chartreuse: \"#7fff00\",\n  chocolate: \"#d2691e\",\n  coral: \"#ff7f50\",\n  cornflowerblue: \"#6495ed\",\n  cornsilk: \"#fff8dc\",\n  crimson: \"#dc143c\",\n  cyan: \"#00ffff\",\n  darkblue: \"#00008b\",\n  darkcyan: \"#008b8b\",\n  darkgoldenrod: \"#b8860b\",\n  darkgray: \"#a9a9a9\",\n  darkgreen: \"#006400\",\n  darkgrey: \"#a9a9a9\",\n  darkkhaki: \"#bdb76b\",\n  darkmagenta: \"#8b008b\",\n  darkolivegreen: \"#556b2f\",\n  darkorange: \"#ff8c00\",\n  darkorchid: \"#9932cc\",\n  darkred: \"#8b0000\",\n  darksalmon: \"#e9967a\",\n  darkseagreen: \"#8fbc8f\",\n  darkslateblue: \"#483d8b\",\n  darkslategray: \"#2f4f4f\",\n  darkslategrey: \"#2f4f4f\",\n  darkturquoise: \"#00ced1\",\n  darkviolet: \"#9400d3\",\n  deeppink: \"#ff1493\",\n  deepskyblue: \"#00bfff\",\n  dimgray: \"#696969\",\n  dimgrey: \"#696969\",\n  dodgerblue: \"#1e90ff\",\n  firebrick: \"#b22222\",\n  floralwhite: \"#fffaf0\",\n  forestgreen: \"#228b22\",\n  gainsboro: \"#dcdcdc\",\n  ghostwhite: \"#f8f8ff\",\n  gold: \"#ffd700\",\n  goldenrod: \"#daa520\",\n  greenyellow: \"#adff2f\",\n  grey: \"#808080\",\n  honeydew: \"#f0fff0\",\n  hotpink: \"#ff69b4\",\n  indianred: \"#cd5c5c\",\n  indigo: \"#4b0082\",\n  ivory: \"#fffff0\",\n  khaki: \"#f0e68c\",\n  lavender: \"#e6e6fa\",\n  lavenderblush: \"#fff0f5\",\n  lawngreen: \"#7cfc00\",\n  lemonchiffon: \"#fffacd\",\n  lightblue: \"#add8e6\",\n  lightcoral: \"#f08080\",\n  lightcyan: \"#e0ffff\",\n  lightgoldenrodyellow: \"#fafad2\",\n  lightgray: \"#d3d3d3\",\n  lightgreen: \"#90ee90\",\n  lightgrey: \"#d3d3d3\",\n  lightpink: \"#ffb6c1\",\n  lightsalmon: \"#ffa07a\",\n  lightseagreen: \"#20b2aa\",\n  lightskyblue: \"#87cefa\",\n  lightslategray: \"#778899\",\n  lightslategrey: \"#778899\",\n  lightsteelblue: \"#b0c4de\",\n  lightyellow: \"#ffffe0\",\n  limegreen: \"#32cd32\",\n  linen: \"#faf0e6\",\n  magenta: \"#ff00ff\",\n  mediumaquamarine: \"#66cdaa\",\n  mediumblue: \"#0000cd\",\n  mediumorchid: \"#ba55d3\",\n  mediumpurple: \"#9370db\",\n  mediumseagreen: \"#3cb371\",\n  mediumslateblue: \"#7b68ee\",\n  mediumspringgreen: \"#00fa9a\",\n  mediumturquoise: \"#48d1cc\",\n  mediumvioletred: \"#c71585\",\n  midnightblue: \"#191970\",\n  mintcream: \"#f5fffa\",\n  mistyrose: \"#ffe4e1\",\n  moccasin: \"#ffe4b5\",\n  navajowhite: \"#ffdead\",\n  oldlace: \"#fdf5e6\",\n  olivedrab: \"#6b8e23\",\n  orangered: \"#ff4500\",\n  orchid: \"#da70d6\",\n  palegoldenrod: \"#eee8aa\",\n  palegreen: \"#98fb98\",\n  paleturquoise: \"#afeeee\",\n  palevioletred: \"#db7093\",\n  papayawhip: \"#ffefd5\",\n  peachpuff: \"#ffdab9\",\n  peru: \"#cd853f\",\n  pink: \"#ffc0cb\",\n  plum: \"#dda0dd\",\n  powderblue: \"#b0e0e6\",\n  rosybrown: \"#bc8f8f\",\n  royalblue: \"#4169e1\",\n  saddlebrown: \"#8b4513\",\n  salmon: \"#fa8072\",\n  sandybrown: \"#f4a460\",\n  seagreen: \"#2e8b57\",\n  seashell: \"#fff5ee\",\n  sienna: \"#a0522d\",\n  skyblue: \"#87ceeb\",\n  slateblue: \"#6a5acd\",\n  slategray: \"#708090\",\n  slategrey: \"#708090\",\n  snow: \"#fffafa\",\n  springgreen: \"#00ff7f\",\n  steelblue: \"#4682b4\",\n  tan: \"#d2b48c\",\n  thistle: \"#d8bfd8\",\n  tomato: \"#ff6347\",\n  turquoise: \"#40e0d0\",\n  violet: \"#ee82ee\",\n  wheat: \"#f5deb3\",\n  whitesmoke: \"#f5f5f5\",\n  yellowgreen: \"#9acd32\",\n  rebeccapurple: \"#663399\"\n};\n\nfunction f2(x) {\n  return x.toFixed(2);\n} // zero pad string\n\n\nfunction zp(s) {\n  return ('0' + s).slice(-2);\n}\n\nfunction clamp(x, min, max) {\n  return x <= min ? min : x >= max ? max : x;\n} // for CMYK and gray values\n\n\nfunction clamp01(x) {\n  return typeof x == 'number' ? clamp(x, 0, 1) : 0;\n} // for RGB values\n\n\nfunction clamp0255(x) {\n  return typeof x == 'number' ? clamp(Math.round(x), 0, 255) : 0;\n} // Only used if cmyk color is passed to svg\n// all parameters should be in 0..1 range\n\n\nfunction cmyk2rgb(c, m, y, k) {\n  var r = 1 - Math.min(1, c * (1 - k) + k);\n  var g = 1 - Math.min(1, m * (1 - k) + k);\n  var b = 1 - Math.min(1, y * (1 - k) + k);\n  r = Math.round(r * 255);\n  g = Math.round(g * 255);\n  b = Math.round(b * 255);\n  return {\n    hex: '#' + zp(r.toString(16)) + zp(g.toString(16)) + zp(b.toString(16)),\n    // for SVG\n    raw: new Buffer.from([r, g, b]) // for PNG\n\n  };\n} // mapping hex color (or css color name) to  [r,g,b]\n\n\nfunction hex2rgb(c) {\n  var r$, g$, b$, r, g, b; // lookup in css color names first\n\n  var s = cssTable[c];\n  if (s) c = s; // remove '#' character if present\n\n  if (c[0] == '#') c = c.substring(1);\n  var a = c.split('');\n\n  if (a.length == 3) {\n    // Expand short notation: #rgb => #rrggbb\n    r$ = a[0] + a[0];\n    g$ = a[1] + a[1];\n    b$ = a[2] + a[2];\n  } else if (a.length >= 6) {\n    // using >= 6 to allow for color string with transparency (#rrggbbaa).\n    //  We are ignoring transparency (last two digits) here for now\n    r$ = a[0] + a[1];\n    g$ = a[2] + a[3];\n    b$ = a[4] + a[5];\n  } else return undefined;\n\n  r = parseInt(r$, 16);\n  g = parseInt(g$, 16);\n  b = parseInt(b$, 16);\n  if (isNaN(r) || isNaN(g) || isNaN(b)) return undefined;\n  return {\n    rgbArr: [r, g, b],\n    raw: new Buffer.from([r, g, b])\n  };\n}\n\nfunction parseColor(color, type) {\n  if (!color) return undefined;\n\n  if (typeof color == 'string') {\n    // hex (or named) color passed\n    if (type == 'svg') return color;else if (type == 'png') return hex2rgb(color).raw;else {\n      var s = hex2rgb(color).rgbArr;\n      return s ? s.join(' ') + ' rg' : undefined;\n    }\n  }\n\n  if (typeof color == 'number') {\n    // Gray color passed\n    color = clamp01(color);\n\n    if (type == 'svg') {\n      var g = zp(Math.round(color * 255).toString(16));\n      return \"#\" + g + g + g;\n    } else if (type == 'png') {\n      var g = Math.round(color * 255);\n      return new Buffer.from([g, g, g]);\n    } else return f2(color) + \" g\";\n  }\n\n  if (Array.isArray(color)) {\n    // RGB color passed,  each component in 0..255 range\n    if (color.length == 3) {\n      color[0] = clamp0255(color[0]);\n      color[1] = clamp0255(color[1]);\n      color[2] = clamp0255(color[2]);\n      if (type == 'svg') return '#' + zp(color[0].toString(16)) + zp(color[1].toString(16)) + zp(color[2].toString(16));else if (type == 'png') return new Buffer.from([color[0], color[1], color[2]]);else return color.join(' ') + ' rg';\n    } // CMYK color passed, each component in 0..1 range\n\n\n    if (color.length == 4) {\n      color[0] = clamp01(color[0]);\n      color[1] = clamp01(color[1]);\n      color[2] = clamp01(color[2]);\n      color[3] = clamp01(color[3]);\n      if (type == 'svg') return cmyk2rgb(color[0], color[1], color[2], color[3]).hex;else if (type == 'png') return cmyk2rgb(color[0], color[1], color[2], color[3]).raw;else {\n        return f2(color[0]) + ' ' + f2(color[1]) + ' ' + f2(color[2]) + ' ' + f2(color[3]) + ' k';\n      }\n    }\n\n    throw new Error(\"Invalid color model: got \" + color.length + \" components, expected 3 or 4.\");\n  }\n\n  throw new Error(\"Invalid color type: \" + typeof color);\n}\n\nmodule.exports = {\n  parser: parseColor\n};","map":{"version":3,"sources":["/home/juano/reactProjects/Novo-Lab-Clinico/node_modules/qr-image-color/lib/parsecolor.js"],"names":["cssTable","black","silver","gray","white","maroon","red","purple","fuchsia","green","lime","olive","yellow","navy","blue","teal","aqua","orange","aliceblue","antiquewhite","aquamarine","azure","beige","bisque","blanchedalmond","blueviolet","brown","burlywood","cadetblue","chartreuse","chocolate","coral","cornflowerblue","cornsilk","crimson","cyan","darkblue","darkcyan","darkgoldenrod","darkgray","darkgreen","darkgrey","darkkhaki","darkmagenta","darkolivegreen","darkorange","darkorchid","darkred","darksalmon","darkseagreen","darkslateblue","darkslategray","darkslategrey","darkturquoise","darkviolet","deeppink","deepskyblue","dimgray","dimgrey","dodgerblue","firebrick","floralwhite","forestgreen","gainsboro","ghostwhite","gold","goldenrod","greenyellow","grey","honeydew","hotpink","indianred","indigo","ivory","khaki","lavender","lavenderblush","lawngreen","lemonchiffon","lightblue","lightcoral","lightcyan","lightgoldenrodyellow","lightgray","lightgreen","lightgrey","lightpink","lightsalmon","lightseagreen","lightskyblue","lightslategray","lightslategrey","lightsteelblue","lightyellow","limegreen","linen","magenta","mediumaquamarine","mediumblue","mediumorchid","mediumpurple","mediumseagreen","mediumslateblue","mediumspringgreen","mediumturquoise","mediumvioletred","midnightblue","mintcream","mistyrose","moccasin","navajowhite","oldlace","olivedrab","orangered","orchid","palegoldenrod","palegreen","paleturquoise","palevioletred","papayawhip","peachpuff","peru","pink","plum","powderblue","rosybrown","royalblue","saddlebrown","salmon","sandybrown","seagreen","seashell","sienna","skyblue","slateblue","slategray","slategrey","snow","springgreen","steelblue","tan","thistle","tomato","turquoise","violet","wheat","whitesmoke","yellowgreen","rebeccapurple","f2","x","toFixed","zp","s","slice","clamp","min","max","clamp01","clamp0255","Math","round","cmyk2rgb","c","m","y","k","r","g","b","hex","toString","raw","Buffer","from","hex2rgb","r$","g$","b$","substring","a","split","length","undefined","parseInt","isNaN","rgbArr","parseColor","color","type","join","Array","isArray","Error","module","exports","parser"],"mappings":"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","sourcesContent":["\"use strict\";\n\n\n// Source: https://developer.mozilla.org/en-US/docs/Web/CSS/color_value\nvar cssTable = {\n\tblack:\t\"#000000\",\n\tsilver:\t\"#c0c0c0\",\n\tgray:\t\"#808080\",\n\twhite:\t\"#ffffff\",\n\tmaroon:\t\"#800000\",\n\tred:\t\"#ff0000\",\n\tpurple:\t\"#800080\",\n\tfuchsia:\t\"#ff00ff\",\n\tgreen:\t\"#008000\",\n\tlime:\t\"#00ff00\",\n\tolive:\t\"#808000\",\n\tyellow:\t\"#ffff00\",\n\tnavy:\t\"#000080\",\n\tblue:\t\"#0000ff\",\n\tteal:\t\"#008080\",\n\taqua:\t\"#00ffff\",\n\torange:\t\"#ffa500\",\n\taliceblue:\t\"#f0f8ff\",\n\tantiquewhite:\t\"#faebd7\",\n\taquamarine:\t\"#7fffd4\",\n\tazure:\t\"#f0ffff\",\n\tbeige:\t\"#f5f5dc\",\n\tbisque:\t\"#ffe4c4\",\n\tblanchedalmond:\t\"#ffebcd\",\n\tblueviolet:\t\"#8a2be2\",\n\tbrown:\t\"#a52a2a\",\n\tburlywood:\t\"#deb887\",\n\tcadetblue:\t\"#5f9ea0\",\n\tchartreuse:\t\"#7fff00\",\n\tchocolate:\t\"#d2691e\",\n\tcoral:\t\"#ff7f50\",\n\tcornflowerblue:\t\"#6495ed\",\n\tcornsilk:\t\"#fff8dc\",\n\tcrimson:\t\"#dc143c\",\n\tcyan:\t\"#00ffff\",\n\tdarkblue:\t\"#00008b\",\n\tdarkcyan:\t\"#008b8b\",\n\tdarkgoldenrod:\t\"#b8860b\",\n\tdarkgray:\t\"#a9a9a9\",\n\tdarkgreen:\t\"#006400\",\n\tdarkgrey:\t\"#a9a9a9\",\n\tdarkkhaki:\t\"#bdb76b\",\n\tdarkmagenta:\t\"#8b008b\",\n\tdarkolivegreen:\t\"#556b2f\",\n\tdarkorange:\t\"#ff8c00\",\n\tdarkorchid:\t\"#9932cc\",\n\tdarkred:\t\"#8b0000\",\n\tdarksalmon:\t\"#e9967a\",\n\tdarkseagreen:\t\"#8fbc8f\",\n\tdarkslateblue:\t\"#483d8b\",\n\tdarkslategray:\t\"#2f4f4f\",\n\tdarkslategrey:\t\"#2f4f4f\",\n\tdarkturquoise:\t\"#00ced1\",\n\tdarkviolet:\t\"#9400d3\",\n\tdeeppink:\t\"#ff1493\",\n\tdeepskyblue:\t\"#00bfff\",\n\tdimgray:\t\"#696969\",\n\tdimgrey:\t\"#696969\",\n\tdodgerblue:\t\"#1e90ff\",\n\tfirebrick:\t\"#b22222\",\n\tfloralwhite:\t\"#fffaf0\",\n\tforestgreen:\t\"#228b22\",\n\tgainsboro:\t\"#dcdcdc\",\n\tghostwhite:\t\"#f8f8ff\",\n\tgold:\t\"#ffd700\",\n\tgoldenrod:\t\"#daa520\",\n\tgreenyellow:\t\"#adff2f\",\n\tgrey:\t\"#808080\",\n\thoneydew:\t\"#f0fff0\",\n\thotpink:\t\"#ff69b4\",\n\tindianred:\t\"#cd5c5c\",\n\tindigo:\t\"#4b0082\",\n\tivory:\t\"#fffff0\",\n\tkhaki:\t\"#f0e68c\",\n\tlavender:\t\"#e6e6fa\",\n\tlavenderblush:\t\"#fff0f5\",\n\tlawngreen:\t\"#7cfc00\",\n\tlemonchiffon:\t\"#fffacd\",\n\tlightblue:\t\"#add8e6\",\n\tlightcoral:\t\"#f08080\",\n\tlightcyan:\t\"#e0ffff\",\n\tlightgoldenrodyellow:\t\"#fafad2\",\n\tlightgray:\t\"#d3d3d3\",\n\tlightgreen:\t\"#90ee90\",\n\tlightgrey:\t\"#d3d3d3\",\n\tlightpink:\t\"#ffb6c1\",\n\tlightsalmon:\t\"#ffa07a\",\n\tlightseagreen:\t\"#20b2aa\",\n\tlightskyblue:\t\"#87cefa\",\n\tlightslategray:\t\"#778899\",\n\tlightslategrey:\t\"#778899\",\n\tlightsteelblue:\t\"#b0c4de\",\n\tlightyellow:\t\"#ffffe0\",\n\tlimegreen:\t\"#32cd32\",\n\tlinen:\t\"#faf0e6\",\n\tmagenta:\t\"#ff00ff\",\n\tmediumaquamarine:\t\"#66cdaa\",\n\tmediumblue:\t\"#0000cd\",\n\tmediumorchid:\t\"#ba55d3\",\n\tmediumpurple:\t\"#9370db\",\n\tmediumseagreen:\t\"#3cb371\",\n\tmediumslateblue:\t\"#7b68ee\",\n\tmediumspringgreen:\t\"#00fa9a\",\n\tmediumturquoise:\t\"#48d1cc\",\n\tmediumvioletred:\t\"#c71585\",\n\tmidnightblue:\t\"#191970\",\n\tmintcream:\t\"#f5fffa\",\n\tmistyrose:\t\"#ffe4e1\",\n\tmoccasin:\t\"#ffe4b5\",\n\tnavajowhite:\t\"#ffdead\",\n\toldlace:\t\"#fdf5e6\",\n\tolivedrab:\t\"#6b8e23\",\n\torangered:\t\"#ff4500\",\n\torchid:\t\"#da70d6\",\n\tpalegoldenrod:\t\"#eee8aa\",\n\tpalegreen:\t\"#98fb98\",\n\tpaleturquoise:\t\"#afeeee\",\n\tpalevioletred:\t\"#db7093\",\n\tpapayawhip:\t\"#ffefd5\",\n\tpeachpuff:\t\"#ffdab9\",\n\tperu:\t\"#cd853f\",\n\tpink:\t\"#ffc0cb\",\n\tplum:\t\"#dda0dd\",\n\tpowderblue:\t\"#b0e0e6\",\n\trosybrown:\t\"#bc8f8f\",\n\troyalblue:\t\"#4169e1\",\n\tsaddlebrown:\t\"#8b4513\",\n\tsalmon:\t\"#fa8072\",\n\tsandybrown:\t\"#f4a460\",\n\tseagreen:\t\"#2e8b57\",\n\tseashell:\t\"#fff5ee\",\n\tsienna:\t\"#a0522d\",\n\tskyblue:\t\"#87ceeb\",\n\tslateblue:\t\"#6a5acd\",\n\tslategray:\t\"#708090\",\n\tslategrey:\t\"#708090\",\n\tsnow:\t\"#fffafa\",\n\tspringgreen:\t\"#00ff7f\",\n\tsteelblue:\t\"#4682b4\",\n\ttan:\t\"#d2b48c\",\n\tthistle:\t\"#d8bfd8\",\n\ttomato:\t\"#ff6347\",\n\tturquoise:\t\"#40e0d0\",\n\tviolet:\t\"#ee82ee\",\n\twheat:\t\"#f5deb3\",\n\twhitesmoke:\t\"#f5f5f5\",\n\tyellowgreen:\t\"#9acd32\",\n\trebeccapurple:\t\"#663399\"\n\t}\n;\n\nfunction f2(x){ \n\treturn x.toFixed(2); \n}\n\n// zero pad string\nfunction zp(s){\n\treturn ('0'+s).slice(-2);\n}\n\nfunction clamp(x, min, max){\n\treturn x <= min ? min : x >= max ? max : x; \n}\n\n// for CMYK and gray values\nfunction clamp01(x){\n\treturn typeof x == 'number' ? clamp(x, 0, 1) : 0;\n}\n\n// for RGB values\nfunction clamp0255(x){\n\treturn typeof x == 'number' ? clamp(Math.round(x), 0, 255) : 0;\n}\n\n\n// Only used if cmyk color is passed to svg\n// all parameters should be in 0..1 range\nfunction cmyk2rgb(c, m, y, k) {\n\tlet r = 1 - Math.min(1, c * (1 - k) + k);\n\tlet g = 1 - Math.min(1, m * (1 - k) + k);\n\tlet b = 1 - Math.min(1, y * (1 - k) + k);\n  \n\tr = Math.round(r * 255);\n\tg = Math.round(g * 255);\n\tb = Math.round(b * 255);\n\treturn {\n\t\thex: '#'+ zp(r.toString(16))+ zp(g.toString(16))+ zp(b.toString(16)),\t// for SVG\n\t\traw: new Buffer.from([r,g,b]),\t// for PNG\n\t}\n}\n\n// mapping hex color (or css color name) to  [r,g,b]\nfunction hex2rgb(c) {\n\n\tvar r$, g$, b$, r, g, b;\n\n\t// lookup in css color names first\n\tvar s = cssTable[c];\n\tif (s) c = s;\n\n\t// remove '#' character if present\n\tif (c[0] == '#') c=c.substring(1);\n\n\tvar a = c.split('');\n\n\tif (a.length == 3) {\n\t\t// Expand short notation: #rgb => #rrggbb\n\t\tr$ = a[0] + a[0];\n\t\tg$ = a[1] + a[1];\n\t\tb$ = a[2] + a[2];\n\t}\n\telse\n\t\tif (a.length >= 6) {\n\t\t\t// using >= 6 to allow for color string with transparency (#rrggbbaa).\n\t\t\t//  We are ignoring transparency (last two digits) here for now\n\t\t\tr$ = a[0] + a[1];\n\t\t\tg$ = a[2] + a[3];\n\t\t\tb$ = a[4] + a[5];\n\t\t}\n\t\telse\n\t\t\treturn undefined;\n\n\tr = parseInt(r$, 16);\n\tg = parseInt(g$, 16);\n\tb = parseInt(b$, 16);\n\n\tif (isNaN(r) || isNaN(g) || isNaN(b))\n\t\treturn undefined;\n\t\n\treturn {\n\t\trgbArr: [ r, g, b ],\n\t\traw: new Buffer.from([r,g,b])\n\t}\n}\n\n\nfunction parseColor(color, type) {\n\tif (!color) return undefined;\n\tif (typeof color == 'string') {\n\t\t// hex (or named) color passed\n\t\tif (type == 'svg')\n\t\t\treturn color;\n\t\telse if (type == 'png')\n\t\t\treturn hex2rgb(color).raw;\n\t\telse{\n\t\t\tvar s = hex2rgb(color).rgbArr;\n\t\t\treturn s ? s.join(' ') + ' rg' : undefined;\n\t\t}\n\t}\n\tif (typeof color == 'number'){\t\n\t\t// Gray color passed\n\t\tcolor=clamp01(color);\n\t\tif (type == 'svg'){\n\t\t\tvar g=zp(Math.round( color*255).toString(16));\n\t\t\treturn \"#\"+g+g+g;\n\t\t} else if (type == 'png'){\n\t\t\tvar g = Math.round(color*255);\n\t\t\treturn new Buffer.from([g,g,g]);\n\t\t}\n\t\telse\n\t\t\treturn f2(color) + \" g\";\n\t}\n\tif (Array.isArray(color)){\n\n\t\t// RGB color passed,  each component in 0..255 range\n\t\tif (color.length == 3){\n\t\t\tcolor[0]=clamp0255(color[0]);\n\t\t\tcolor[1]=clamp0255(color[1]);\n\t\t\tcolor[2]=clamp0255(color[2]);\n\t\t\tif (type == 'svg')\n\t\t\t\treturn '#'+ zp(color[0].toString(16))+ zp(color[1].toString(16))+ zp(color[2].toString(16));\n\t\t\telse if (type=='png')\n\t\t\t\treturn new Buffer.from([color[0], color[1], color[2]]);\n\t\t\telse\n\t\t\t\treturn  color.join(' ') + ' rg';\n\t\t}\n\t\t// CMYK color passed, each component in 0..1 range\n\t\tif (color.length == 4){\n\t\t\tcolor[0]=clamp01(color[0]);\n\t\t\tcolor[1]=clamp01(color[1]);\n\t\t\tcolor[2]=clamp01(color[2]);\n\t\t\tcolor[3]=clamp01(color[3]);\n\t\t\tif (type=='svg')\n\t\t\t\treturn cmyk2rgb(color[0],color[1],color[2],color[3]).hex;\n\t\t\telse if (type=='png')\n\t\t\t\treturn cmyk2rgb(color[0],color[1],color[2],color[3]).raw;\n\t\t\telse{\n\t\t\t\treturn f2(color[0]) + ' ' + f2(color[1]) + ' ' + f2(color[2]) + ' ' + f2(color[3]) + ' k';\n\t\t\t}\n\t\t}\n\t\tthrow new Error (\"Invalid color model: got \" + color.length + \" components, expected 3 or 4.\");\n\t}\n\tthrow new Error (\"Invalid color type: \" + typeof color)\n\n}\n\nmodule.exports = {\n\tparser: parseColor\n}"]},"metadata":{},"sourceType":"script"}