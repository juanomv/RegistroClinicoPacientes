{"ast":null,"code":"\"use strict\";\n\nvar Readable = require('stream').Readable;\n\nvar QR = require('./qr-base').QR;\n\nvar png = require('./png');\n\nvar vector = require('./vector');\n\nvar colorParser = require('./parsecolor');\n\nvar fn_noop = function fn_noop() {};\n\nvar BITMAP_OPTIONS = {\n  parse_url: false,\n  ec_level: 'M',\n  size: 5,\n  margin: 4,\n  customize: null,\n  color: null,\n  background: null,\n  transparent: false // default is false for bitmap to keep default behaviour\n\n};\nvar VECTOR_OPTIONS = {\n  parse_url: false,\n  ec_level: 'M',\n  margin: 1,\n  size: 0,\n  color: null,\n  background: null,\n  transparent: true // default is true for vector to keep default behaviour\n\n};\n\nfunction get_options(options, force_type) {\n  if (typeof options === 'string') {\n    options = {\n      'ec_level': options\n    };\n  } else {\n    options = options || {};\n  }\n\n  var _options = {\n    type: String(force_type || options.type || 'png').toLowerCase()\n  };\n  var defaults = _options.type == 'png' ? BITMAP_OPTIONS : VECTOR_OPTIONS;\n\n  for (var k in defaults) {\n    _options[k] = k in options ? options[k] : defaults[k];\n  }\n\n  return _options;\n}\n\nfunction qr_image(text, options) {\n  options = get_options(options);\n  var matrix = QR(text, options.ec_level, options.parse_url);\n  var stream = new Readable();\n  stream._read = fn_noop;\n  var fore = colorParser.parser(options.color, options.type);\n  var back = colorParser.parser(options.background, options.type);\n\n  switch (options.type) {\n    case 'svg':\n    case 'pdf':\n    case 'eps':\n      process.nextTick(function () {\n        vector[options.type](matrix, stream, options.margin, options.size, fore, back, options.transparent);\n      });\n      break;\n\n    case 'svgpath':\n      // deprecated, use svg_object method\n      process.nextTick(function () {\n        var obj = vector.svg_object(matrix, options.margin, options.size);\n        stream.push(obj.path);\n        stream.push(null);\n      });\n      break;\n\n    case 'png':\n    default:\n      process.nextTick(function () {\n        var bitmap = png.bitmap(matrix, options.size, options.margin);\n\n        if (options.customize) {\n          options.customize(bitmap);\n        }\n\n        png.png(bitmap, stream, fore, back, options.transparent);\n      });\n  }\n\n  return stream;\n}\n\nfunction qr_image_sync(text, options) {\n  options = get_options(options);\n  var matrix = QR(text, options.ec_level, options.parse_url);\n  var stream = [];\n  var result;\n  var fore = colorParser.parser(options.color, options.type);\n  var back = colorParser.parser(options.background, options.type);\n\n  switch (options.type) {\n    case 'svg':\n    case 'pdf':\n    case 'eps':\n      vector[options.type](matrix, stream, options.margin, options.size, fore, back, options.transparent);\n      result = stream.filter(Boolean).join('');\n      break;\n\n    case 'png':\n    default:\n      var bitmap = png.bitmap(matrix, options.size, options.margin);\n\n      if (options.customize) {\n        options.customize(bitmap);\n      }\n\n      png.png(bitmap, stream, fore, back, options.transparent);\n      result = Buffer.concat(stream.filter(Boolean));\n  }\n\n  return result;\n}\n\nfunction svg_object(text, options) {\n  options = get_options(options, 'svg');\n  var matrix = QR(text, options.ec_level);\n  return vector.svg_object(matrix, options.margin);\n}\n\nmodule.exports = {\n  matrix: QR,\n  image: qr_image,\n  imageSync: qr_image_sync,\n  svgObject: svg_object\n};","map":{"version":3,"sources":["/home/juano/reactProjects/qr_guillo (copia)/node_modules/qr-image-color/lib/qr.js"],"names":["Readable","require","QR","png","vector","colorParser","fn_noop","BITMAP_OPTIONS","parse_url","ec_level","size","margin","customize","color","background","transparent","VECTOR_OPTIONS","get_options","options","force_type","_options","type","String","toLowerCase","defaults","k","qr_image","text","matrix","stream","_read","fore","parser","back","process","nextTick","obj","svg_object","push","path","bitmap","qr_image_sync","result","filter","Boolean","join","Buffer","concat","module","exports","image","imageSync","svgObject"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar Readable = require('stream').Readable;\n\nvar QR = require('./qr-base').QR;\nvar png = require('./png');\nvar vector = require('./vector');\nvar colorParser = require('./parsecolor');\n\nvar fn_noop = function() {};\n\nvar BITMAP_OPTIONS = {\n    parse_url: false,\n    ec_level: 'M',\n    size: 5,\n    margin: 4,\n    customize: null,\n    color: null,\n    background: null,\n    transparent: false      // default is false for bitmap to keep default behaviour\n};\n\nvar VECTOR_OPTIONS = {\n    parse_url: false,\n    ec_level: 'M',\n    margin: 1,\n    size: 0,\n    color: null,\n    background: null,\n    transparent: true       // default is true for vector to keep default behaviour\n};\n\nfunction get_options(options, force_type) {\n    if (typeof options === 'string') {\n        options = { 'ec_level': options }\n    } else {\n        options = options || {};\n    }\n    var _options = {\n        type: String(force_type || options.type || 'png').toLowerCase()\n    };\n\n    var defaults = _options.type == 'png' ? BITMAP_OPTIONS : VECTOR_OPTIONS;\n\n    for (var k in defaults) {\n        _options[k] = k in options ? options[k] : defaults[k];\n    }\n\n    return _options;\n}\n\nfunction qr_image(text, options) {\n    options = get_options(options);\n\n    var matrix = QR(text, options.ec_level, options.parse_url);\n    var stream = new Readable();\n    stream._read = fn_noop;\n\n    var fore = colorParser.parser(options.color, options.type);\n    var back = colorParser.parser(options.background, options.type);\n\n    switch (options.type) {\n    case 'svg':\n    case 'pdf':\n    case 'eps':\n        process.nextTick(function() {\n            vector[options.type](matrix, stream, options.margin, options.size, fore, back, options.transparent);\n        });\n        break;\n    case 'svgpath':\n        // deprecated, use svg_object method\n        process.nextTick(function() {\n            var obj = vector.svg_object(matrix, options.margin, options.size);\n            stream.push(obj.path);\n            stream.push(null);\n        });\n        break;\n    case 'png':\n    default:\n        process.nextTick(function() {\n            var bitmap = png.bitmap(matrix, options.size, options.margin);\n            if (options.customize) {\n                options.customize(bitmap);\n            }\n            png.png(bitmap, stream, fore, back, options.transparent);\n        });\n    }\n\n    return stream;\n}\n\nfunction qr_image_sync(text, options) {\n    options = get_options(options);\n\n    var matrix = QR(text, options.ec_level, options.parse_url);\n    var stream = [];\n    var result;\n\n    var fore = colorParser.parser(options.color, options.type);\n    var back = colorParser.parser(options.background, options.type);\n\n    switch (options.type) {\n    case 'svg':\n    case 'pdf':\n    case 'eps':\n        vector[options.type](matrix, stream, options.margin, options.size, fore, back, options.transparent);\n        result = stream.filter(Boolean).join('');\n        break;\n    case 'png':\n    default:\n        var bitmap = png.bitmap(matrix, options.size, options.margin);\n        if (options.customize) {\n            options.customize(bitmap);\n        }\n        png.png(bitmap, stream, fore, back, options.transparent);\n        result = Buffer.concat(stream.filter(Boolean));\n    }\n\n    return result;\n}\n\nfunction svg_object(text, options) {\n    options = get_options(options, 'svg');\n\n    var matrix = QR(text, options.ec_level);\n    return vector.svg_object(matrix, options.margin);\n}\n\nmodule.exports = {\n    matrix: QR,\n    image: qr_image,\n    imageSync: qr_image_sync,\n    svgObject: svg_object\n};\n"]},"metadata":{},"sourceType":"script"}