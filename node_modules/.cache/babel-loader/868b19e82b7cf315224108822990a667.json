{"ast":null,"code":"import { onAuthStateChanged, onIdTokenChanged, getIdToken } from 'firebase/auth';\nimport { Observable, from, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Create an observable of authentication state. The observer is only\n * triggered on sign-in or sign-out.\n * @param auth firebase.auth.Auth\n */\n\nfunction authState(auth) {\n  return new Observable(function (subscriber) {\n    var unsubscribe = onAuthStateChanged(auth, subscriber.next.bind(subscriber), subscriber.error.bind(subscriber), subscriber.complete.bind(subscriber));\n    return {\n      unsubscribe: unsubscribe\n    };\n  });\n}\n/**\n * Create an observable of user state. The observer is triggered for sign-in,\n * sign-out, and token refresh events\n * @param auth firebase.auth.Auth\n */\n\n\nfunction user(auth) {\n  return new Observable(function (subscriber) {\n    var unsubscribe = onIdTokenChanged(auth, subscriber.next.bind(subscriber), subscriber.error.bind(subscriber), subscriber.complete.bind(subscriber));\n    return {\n      unsubscribe: unsubscribe\n    };\n  });\n}\n/**\n * Create an observable of idToken state. The observer is triggered for sign-in,\n * sign-out, and token refresh events\n * @param auth firebase.auth.Auth\n */\n\n\nfunction idToken(auth) {\n  return user(auth).pipe(switchMap(function (user) {\n    return user ? from(getIdToken(user)) : of(null);\n  }));\n}\n\nexport { authState, idToken, user };","map":{"version":3,"sources":["../../auth/index.ts"],"names":[],"mappings":";;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AACA;AACA;AACA;AACA;;AACO,SAAS,SAAT,CAAmB,IAAnB,EAAyB;AAC5B,SAAO,IAAI,UAAJ,CAAe,UAAU,UAAV,EAAsB;AACxC,QAAI,WAAW,GAAG,kBAAkB,CAAC,IAAD,EAAO,UAAU,CAAC,IAAX,CAAgB,IAAhB,CAAqB,UAArB,CAAP,EAAyC,UAAU,CAAC,KAAX,CAAiB,IAAjB,CAAsB,UAAtB,CAAzC,EAA4E,UAAU,CAAC,QAAX,CAAoB,IAApB,CAAyB,UAAzB,CAA5E,CAApC;AACA,WAAO;AAAE,MAAA,WAAW,EAAE;AAAf,KAAP;AACH,GAHM,CAAP;AAIH;AACD;AACA;AACA;AACA;AACA;;;AACO,SAAS,IAAT,CAAc,IAAd,EAAoB;AACvB,SAAO,IAAI,UAAJ,CAAe,UAAU,UAAV,EAAsB;AACxC,QAAI,WAAW,GAAG,gBAAgB,CAAC,IAAD,EAAO,UAAU,CAAC,IAAX,CAAgB,IAAhB,CAAqB,UAArB,CAAP,EAAyC,UAAU,CAAC,KAAX,CAAiB,IAAjB,CAAsB,UAAtB,CAAzC,EAA4E,UAAU,CAAC,QAAX,CAAoB,IAApB,CAAyB,UAAzB,CAA5E,CAAlC;AACA,WAAO;AAAE,MAAA,WAAW,EAAE;AAAf,KAAP;AACH,GAHM,CAAP;AAIH;AACD;AACA;AACA;AACA;AACA;;;AACO,SAAS,OAAT,CAAiB,IAAjB,EAAuB;AAC1B,SAAO,IAAI,CAAC,IAAD,CAAJ,CAAW,IAAX,CAAgB,SAAS,CAAC,UAAU,IAAV,EAAgB;AAAE,WAAQ,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,IAAD,CAAX,CAAP,GAA4B,EAAE,CAAC,IAAD,CAA1C;AAAoD,GAAvE,CAAzB,CAAP;AACJ","sourcesContent":["/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { onAuthStateChanged, onIdTokenChanged, getIdToken } from 'firebase/auth';\nimport { Observable, from, of } from 'rxjs';\nimport { switchMap } from 'rxjs/operators';\n/**\n * Create an observable of authentication state. The observer is only\n * triggered on sign-in or sign-out.\n * @param auth firebase.auth.Auth\n */\nexport function authState(auth) {\n    return new Observable(function (subscriber) {\n        var unsubscribe = onAuthStateChanged(auth, subscriber.next.bind(subscriber), subscriber.error.bind(subscriber), subscriber.complete.bind(subscriber));\n        return { unsubscribe: unsubscribe };\n    });\n}\n/**\n * Create an observable of user state. The observer is triggered for sign-in,\n * sign-out, and token refresh events\n * @param auth firebase.auth.Auth\n */\nexport function user(auth) {\n    return new Observable(function (subscriber) {\n        var unsubscribe = onIdTokenChanged(auth, subscriber.next.bind(subscriber), subscriber.error.bind(subscriber), subscriber.complete.bind(subscriber));\n        return { unsubscribe: unsubscribe };\n    });\n}\n/**\n * Create an observable of idToken state. The observer is triggered for sign-in,\n * sign-out, and token refresh events\n * @param auth firebase.auth.Auth\n */\nexport function idToken(auth) {\n    return user(auth).pipe(switchMap(function (user) { return (user ? from(getIdToken(user)) : of(null)); }));\n}\n"]},"metadata":{},"sourceType":"module"}