{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { getBlobFromURL } from './getBlobFromURL';\nimport { embedResources } from './embedResources';\nimport { getMimeType, isDataUrl, makeDataUrl, toArray } from './util';\n\nfunction embedBackground(clonedNode, options) {\n  var _a;\n\n  return __awaiter(this, void 0, void 0, function* () {\n    const background = (_a = clonedNode.style) === null || _a === void 0 ? void 0 : _a.getPropertyValue('background');\n\n    if (!background) {\n      return Promise.resolve(clonedNode);\n    }\n\n    return Promise.resolve(background).then(cssString => embedResources(cssString, null, options)).then(cssString => {\n      clonedNode.style.setProperty('background', cssString, clonedNode.style.getPropertyPriority('background'));\n      return clonedNode;\n    });\n  });\n}\n\nfunction embedImageNode(clonedNode, options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (!(clonedNode instanceof HTMLImageElement && !isDataUrl(clonedNode.src)) && !(clonedNode instanceof SVGImageElement && !isDataUrl(clonedNode.href.baseVal))) {\n      return Promise.resolve(clonedNode);\n    }\n\n    const src = clonedNode instanceof HTMLImageElement ? clonedNode.src : clonedNode.href.baseVal;\n    return Promise.resolve(src).then(url => getBlobFromURL(url, options)).then(data => makeDataUrl(data.blob, getMimeType(src) || data.contentType)).then(dataURL => new Promise((resolve, reject) => {\n      clonedNode.onload = resolve;\n      clonedNode.onerror = reject;\n\n      if (clonedNode instanceof HTMLImageElement) {\n        clonedNode.srcset = '';\n        clonedNode.src = dataURL;\n      } else {\n        clonedNode.href.baseVal = dataURL;\n      }\n    })).then(() => clonedNode, () => clonedNode);\n  });\n}\n\nfunction embedChildren(clonedNode, options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const children = toArray(clonedNode.childNodes); // eslint-disable-next-line no-use-before-define\n\n    const deferreds = children.map(child => embedImages(child, options));\n    return Promise.all(deferreds).then(() => clonedNode);\n  });\n}\n\nexport function embedImages(clonedNode, options) {\n  return __awaiter(this, void 0, void 0, function* () {\n    if (!(clonedNode instanceof Element)) {\n      return Promise.resolve(clonedNode);\n    }\n\n    return Promise.resolve(clonedNode).then(node => embedBackground(node, options)).then(node => embedImageNode(node, options)).then(node => embedChildren(node, options));\n  });\n}","map":{"version":3,"sources":["../src/embedImages.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { getBlobFromURL } from './getBlobFromURL';\nimport { embedResources } from './embedResources';\nimport { getMimeType, isDataUrl, makeDataUrl, toArray } from './util';\nfunction embedBackground(clonedNode, options) {\n    var _a;\n    return __awaiter(this, void 0, void 0, function* () {\n        const background = (_a = clonedNode.style) === null || _a === void 0 ? void 0 : _a.getPropertyValue('background');\n        if (!background) {\n            return Promise.resolve(clonedNode);\n        }\n        return Promise.resolve(background)\n            .then((cssString) => embedResources(cssString, null, options))\n            .then((cssString) => {\n            clonedNode.style.setProperty('background', cssString, clonedNode.style.getPropertyPriority('background'));\n            return clonedNode;\n        });\n    });\n}\nfunction embedImageNode(clonedNode, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!(clonedNode instanceof HTMLImageElement && !isDataUrl(clonedNode.src)) &&\n            !(clonedNode instanceof SVGImageElement &&\n                !isDataUrl(clonedNode.href.baseVal))) {\n            return Promise.resolve(clonedNode);\n        }\n        const src = clonedNode instanceof HTMLImageElement\n            ? clonedNode.src\n            : clonedNode.href.baseVal;\n        return Promise.resolve(src)\n            .then((url) => getBlobFromURL(url, options))\n            .then((data) => makeDataUrl(data.blob, getMimeType(src) || data.contentType))\n            .then((dataURL) => new Promise((resolve, reject) => {\n            clonedNode.onload = resolve;\n            clonedNode.onerror = reject;\n            if (clonedNode instanceof HTMLImageElement) {\n                clonedNode.srcset = '';\n                clonedNode.src = dataURL;\n            }\n            else {\n                clonedNode.href.baseVal = dataURL;\n            }\n        }))\n            .then(() => clonedNode, () => clonedNode);\n    });\n}\nfunction embedChildren(clonedNode, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        const children = toArray(clonedNode.childNodes);\n        // eslint-disable-next-line no-use-before-define\n        const deferreds = children.map((child) => embedImages(child, options));\n        return Promise.all(deferreds).then(() => clonedNode);\n    });\n}\nexport function embedImages(clonedNode, options) {\n    return __awaiter(this, void 0, void 0, function* () {\n        if (!(clonedNode instanceof Element)) {\n            return Promise.resolve(clonedNode);\n        }\n        return Promise.resolve(clonedNode)\n            .then((node) => embedBackground(node, options))\n            .then((node) => embedImageNode(node, options))\n            .then((node) => embedChildren(node, options));\n    });\n}\n//# sourceMappingURL=embedImages.js.map"]},"metadata":{},"sourceType":"module"}