{"ast":null,"code":"import { getDownloadURL as getDownloadURL$1, getMetadata as getMetadata$1, uploadBytesResumable as uploadBytesResumable$1, uploadString as uploadString$1 } from 'firebase/storage';\nimport { Observable, from } from 'rxjs';\nimport { debounceTime, shareReplay, map } from 'rxjs/operators';\n\nfunction fromTask(task) {\n  return new Observable(function (subscriber) {\n    var progress = function (snap) {\n      return subscriber.next(snap);\n    };\n\n    var error = function (e) {\n      return subscriber.error(e);\n    };\n\n    var complete = function () {\n      return subscriber.complete();\n    }; // emit the current state of the task\n\n\n    progress(task.snapshot); // emit progression of the task\n\n    var unsubscribeFromOnStateChanged = task.on('state_changed', progress); // use the promise form of task, to get the last success snapshot\n\n    task.then(function (snapshot) {\n      progress(snapshot);\n      setTimeout(function () {\n        return complete();\n      }, 0);\n    }, function (e) {\n      progress(task.snapshot);\n      setTimeout(function () {\n        return error(e);\n      }, 0);\n    }); // the unsubscribe method returns by storage isn't typed in the\n    // way rxjs expects, Function vs () => void, so wrap it\n\n    return function unsubscribe() {\n      unsubscribeFromOnStateChanged();\n    };\n  }).pipe( // since we're emitting first the current snapshot and then progression\n  // it's possible that we could double fire synchronously; namely when in\n  // a terminal state (success, error, canceled). Debounce to address.\n  debounceTime(0));\n}\n\nfunction getDownloadURL(ref) {\n  return from(getDownloadURL$1(ref));\n} // TODO: fix storage typing in firebase, then apply the same fix here\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n\nfunction getMetadata(ref) {\n  return from(getMetadata$1(ref));\n} // MARK: Breaking change (renaming put to uploadBytesResumable)\n\n\nfunction uploadBytesResumable(ref, data, metadata) {\n  return new Observable(function (subscriber) {\n    var task = uploadBytesResumable$1(ref, data, metadata);\n    var subscription = fromTask(task).subscribe(subscriber);\n    return function unsubscribe() {\n      subscription.unsubscribe();\n      task.cancel();\n    };\n  }).pipe(shareReplay({\n    bufferSize: 1,\n    refCount: true\n  }));\n} // MARK: Breaking change (renaming put to uploadString)\n\n\nfunction uploadString(ref, data, format, metadata) {\n  return from(uploadString$1(ref, data, format, metadata));\n}\n\nfunction percentage(task) {\n  return fromTask(task).pipe(map(function (snapshot) {\n    return {\n      progress: snapshot.bytesTransferred / snapshot.totalBytes * 100,\n      snapshot: snapshot\n    };\n  }));\n}\n\nexport { fromTask, getDownloadURL, getMetadata, percentage, uploadBytesResumable, uploadString };","map":{"version":3,"sources":["../../storage/index.ts"],"names":["_getDownloadURL","_getMetadata","_uploadBytesResumable","_uploadString"],"mappings":";;;;AAGO,SAAS,QAAT,CAAkB,IAAlB,EAAwB;AAC3B,SAAO,IAAI,UAAJ,CAAe,UAAU,UAAV,EAAsB;AACxC,QAAI,QAAQ,GAAG,UAAU,IAAV,EAAgB;AAAE,aAAO,UAAU,CAAC,IAAX,CAAgB,IAAhB,CAAP;AAA+B,KAAhE;;AACA,QAAI,KAAK,GAAG,UAAU,CAAV,EAAa;AAAE,aAAO,UAAU,CAAC,KAAX,CAAiB,CAAjB,CAAP;AAA6B,KAAxD;;AACA,QAAI,QAAQ,GAAG,YAAY;AAAE,aAAO,UAAU,CAAC,QAAX,EAAP;AAA+B,KAA5D,CAHwC,CAIhD;;;AACQ,IAAA,QAAQ,CAAC,IAAI,CAAC,QAAN,CAAR,CALwC,CAMhD;;AACQ,QAAI,6BAA6B,GAAG,IAAI,CAAC,EAAL,CAAQ,eAAR,EAAyB,QAAzB,CAApC,CAPwC,CAQhD;;AACQ,IAAA,IAAI,CAAC,IAAL,CAAU,UAAU,QAAV,EAAoB;AAC1B,MAAA,QAAQ,CAAC,QAAD,CAAR;AACA,MAAA,UAAU,CAAC,YAAY;AAAE,eAAO,QAAQ,EAAf;AAAoB,OAAnC,EAAqC,CAArC,CAAV;AACH,KAHD,EAGG,UAAU,CAAV,EAAa;AACZ,MAAA,QAAQ,CAAC,IAAI,CAAC,QAAN,CAAR;AACA,MAAA,UAAU,CAAC,YAAY;AAAE,eAAO,KAAK,CAAC,CAAD,CAAZ;AAAkB,OAAjC,EAAmC,CAAnC,CAAV;AACH,KAND,EATwC,CAgBhD;AACA;;AACQ,WAAO,SAAS,WAAT,GAAuB;AAC1B,MAAA,6BAA6B;AAChC,KAFD;AAGH,GArBM,EAqBJ,IArBI,EAsBX;AACA;AACA;AACI,EAAA,YAAY,CAAC,CAAD,CAzBL,CAAP;AA0BH;;AACM,SAAS,cAAT,CAAwB,GAAxB,EAA6B;AAChC,SAAO,IAAI,CAACA,gBAAe,CAAC,GAAD,CAAhB,CAAX;AACH,C,CACD;AACA;;;AACO,SAAS,WAAT,CAAqB,GAArB,EAA0B;AAC7B,SAAO,IAAI,CAACC,aAAY,CAAC,GAAD,CAAb,CAAX;AACH,C,CACD;;;AACO,SAAS,oBAAT,CAA8B,GAA9B,EAAmC,IAAnC,EAAyC,QAAzC,EAAmD;AACtD,SAAO,IAAI,UAAJ,CAAe,UAAU,UAAV,EAAsB;AACxC,QAAI,IAAI,GAAGC,sBAAqB,CAAC,GAAD,EAAM,IAAN,EAAY,QAAZ,CAAhC;AACA,QAAI,YAAY,GAAG,QAAQ,CAAC,IAAD,CAAR,CAAe,SAAf,CAAyB,UAAzB,CAAnB;AACA,WAAO,SAAS,WAAT,GAAuB;AAC1B,MAAA,YAAY,CAAC,WAAb;AACA,MAAA,IAAI,CAAC,MAAL;AACH,KAHD;AAIH,GAPM,EAOJ,IAPI,CAOC,WAAW,CAAC;AAAE,IAAA,UAAU,EAAE,CAAd;AAAiB,IAAA,QAAQ,EAAE;AAA3B,GAAD,CAPZ,CAAP;AAQH,C,CACD;;;AACO,SAAS,YAAT,CAAsB,GAAtB,EAA2B,IAA3B,EAAiC,MAAjC,EAAyC,QAAzC,EAAmD;AACtD,SAAO,IAAI,CAACC,cAAa,CAAC,GAAD,EAAM,IAAN,EAAY,MAAZ,EAAoB,QAApB,CAAd,CAAX;AACH;;AACM,SAAS,UAAT,CAAoB,IAApB,EAA0B;AAC7B,SAAO,QAAQ,CAAC,IAAD,CAAR,CAAe,IAAf,CAAoB,GAAG,CAAC,UAAU,QAAV,EAAoB;AAAE,WAAQ;AACzD,MAAA,QAAQ,EAAG,QAAQ,CAAC,gBAAT,GAA4B,QAAQ,CAAC,UAAtC,GAAoD,GADL;AAEzD,MAAA,QAAQ,EAAE;AAF+C,KAAR;AAGhD,GAHyB,CAAvB,CAAP;AAIJ","sourcesContent":["import { getDownloadURL as _getDownloadURL, getMetadata as _getMetadata, uploadBytesResumable as _uploadBytesResumable, uploadString as _uploadString, } from 'firebase/storage';\nimport { Observable, from } from 'rxjs';\nimport { debounceTime, map, shareReplay } from 'rxjs/operators';\nexport function fromTask(task) {\n    return new Observable(function (subscriber) {\n        var progress = function (snap) { return subscriber.next(snap); };\n        var error = function (e) { return subscriber.error(e); };\n        var complete = function () { return subscriber.complete(); };\n        // emit the current state of the task\n        progress(task.snapshot);\n        // emit progression of the task\n        var unsubscribeFromOnStateChanged = task.on('state_changed', progress);\n        // use the promise form of task, to get the last success snapshot\n        task.then(function (snapshot) {\n            progress(snapshot);\n            setTimeout(function () { return complete(); }, 0);\n        }, function (e) {\n            progress(task.snapshot);\n            setTimeout(function () { return error(e); }, 0);\n        });\n        // the unsubscribe method returns by storage isn't typed in the\n        // way rxjs expects, Function vs () => void, so wrap it\n        return function unsubscribe() {\n            unsubscribeFromOnStateChanged();\n        };\n    }).pipe(\n    // since we're emitting first the current snapshot and then progression\n    // it's possible that we could double fire synchronously; namely when in\n    // a terminal state (success, error, canceled). Debounce to address.\n    debounceTime(0));\n}\nexport function getDownloadURL(ref) {\n    return from(_getDownloadURL(ref));\n}\n// TODO: fix storage typing in firebase, then apply the same fix here\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function getMetadata(ref) {\n    return from(_getMetadata(ref));\n}\n// MARK: Breaking change (renaming put to uploadBytesResumable)\nexport function uploadBytesResumable(ref, data, metadata) {\n    return new Observable(function (subscriber) {\n        var task = _uploadBytesResumable(ref, data, metadata);\n        var subscription = fromTask(task).subscribe(subscriber);\n        return function unsubscribe() {\n            subscription.unsubscribe();\n            task.cancel();\n        };\n    }).pipe(shareReplay({ bufferSize: 1, refCount: true }));\n}\n// MARK: Breaking change (renaming put to uploadString)\nexport function uploadString(ref, data, format, metadata) {\n    return from(_uploadString(ref, data, format, metadata));\n}\nexport function percentage(task) {\n    return fromTask(task).pipe(map(function (snapshot) { return ({\n        progress: (snapshot.bytesTransferred / snapshot.totalBytes) * 100,\n        snapshot: snapshot\n    }); }));\n}\n"]},"metadata":{},"sourceType":"module"}